[build-system]
requires = ['setuptools>=60', 'wheel']
build-backend = 'setuptools.build_meta'

[project]
name = 'lattifai'
version = '0.2.4'
description = "Lattifai Python SDK: Seamless Integration with Lattifai's Speech and Video AI Services"
keywords = ['lattifai', 'speech recognition', 'video analysis', 'ai', 'sdk', 'api client']
readme = 'README.md'
license = {file = 'LICENSE'}
authors = [
  { name = 'Lattifai Technologies', email = 'tech@lattifai.com' },
]
maintainers = [
  { name = 'Lattice', email = 'tech@lattifai.com' },
]
requires-python = '>=3.9'

dependencies = [
    "lattifai-core>=0.2.0",
    "httpx",
    "python-dotenv",
    "lhotse>=1.26.0",
    "colorful>=0.5.6",
    "pysubs2",
    "praatio",
    "tgt",
    "onnxruntime",
    "resampy",
    "g2p-phonemizer==0.1.1",
    "wtpsplit>=2.1.6",
    "av",
    # agentic workflow dependencies
    "questionary>=2.0",
    "yt-dlp",
    "pycryptodome",
    "google-genai"
]

classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: Apache Software License',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: POSIX :: Linux',
    'Operating System :: Microsoft :: Windows',
    'Topic :: Multimedia :: Sound/Audio',
    'Topic :: Multimedia :: Video',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
]

[project.urls]
Homepage = 'https://github.com/lattifai/lattifai-python'
Documentation = 'https://github.com/lattifai/lattifai-python/README.md'
'Bug Tracker' = 'https://github.com/lattifai/lattifai-python/issues'
Discussions = 'https://github.com/lattifai/lattifai-python/discussions'
Changelog = 'https://github.com/lattifai/lattifai-python/CHANGELOG.md'

[project.scripts]
lattifai = 'lattifai.bin:cli'
install-k2 = 'scripts.install_k2:install_k2'

[tool.setuptools]
packages = ["lattifai", "lattifai.io", "lattifai.tokenizer", "lattifai.workers", "lattifai.bin", "scripts"]

[tool.setuptools.package-dir]
lattifai = "src/lattifai"

[project.optional-dependencies]
numpy = ['numpy']
test = ['pytest', 'pytest-cov', 'ruff', 'numpy']
all = [
    "numpy",
    "pytest",
    "pytest-cov",
    "ruff"
]

[tool.pytest.ini_options]
addopts = "--durations=10"
testpaths = ["tests"]

[tool.coverage.run]
omit = [
    # '*/api/basic_int/__init__.py',
]

[tool.ruff]
src = [
    'src',
    'tests',
]
line-length = 120

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint]
flake8-quotes.inline-quotes = 'single'

# https://docs.astral.sh/ruff/rules/
preview = true  # https://docs.astral.sh/ruff/preview/#selecting-single-preview-rules
select = [
    'A',
    # 'B',  # todo
    # 'COM',  # todo
    'E',
    'F',
    'Q',
    'W',
    # 'D',  # todo. this is nice!
    # 'PL',  # todo. some interesting ideas
    # 'DOC',  # todo: interesting
]
ignore = [
    'F401',  # module imported but unused
    'A001',
    'A002',
    'E221',  # Multiple spaces before operator
    'E231',  # Missing whitespace after ','
    'E241',  # Multiple spaces after ','
    'E251',  # Unexpected spaces around keyword / parameter equals
    'E272',  # Multiple spaces before keyword
    'E731',  # Do not assign a `lambda` expression, use a `def`
    'E722',  # Do not use bare `except`
    # 'PLR2004',
]

[tool.ruff.lint.per-file-ignores]
'*.ipynb' = [
    'E501',  # Line too long (104 > 88)
]
'test*.py' = [
    # 'D',  # maybe just the need for docstring
]

[tool.isort]
profile = 'black'
line_length = 120
multi_line_output = 4
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
src_paths = ['src', 'tests']
known_first_party = ['lattifai']
